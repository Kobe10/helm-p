<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           				http://www.springframework.org/schema/context
           				http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <bean id="springContextUtil " class="com.shfb.oframe.core.util.spring.SpringContextUtil " scope="singleton"/>
    <!--使用注解-->
    <context:annotation-config/>
    <context:component-scan base-package="com.shfb,com.bjshfb"/>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!--自定义配置信息加载器-->
    <bean id="propertyConfigurer"
          class="com.shfb.oframe.spring.PropertyPlaceholderConfigurerExt">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:oframe.properties</value>
            </list>
        </property>
        <property name="encryptKey">
            <list>
                <value>jdbc.core.username</value>
                <value>jdbc.core.password</value>
            </list>
        </property>
    </bean>

    <!--定义数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.core.url}"/>
        <property name="username" value="${jdbc.core.username}"/>
        <property name="password" value="${jdbc.core.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="10"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。
        如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用-->
        <property name="validationQuery" value="SELECT 'x'"/>
        <!-- 不影响性能-->
        <property name="testWhileIdle" value="true"/>
        <!-- 若配置成true影响性能-->
        <property name="testOnBorrow" value="false"/>
        <!-- 若配置成true影响性能-->
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters ,上线后若不想输出sql执行记录，可去掉log4j配置-->
        <property name="filters" value="stat,log4j"/>

        <!--连接泄漏监听（影响性能） -->
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>


    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
          lazy-init="false" autowire="default">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="del*">PROPAGATION_REQUIRED, -Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="create*">PROPAGATION_REQUIRES_NEW,-Exception</prop>
            </props>
        </property>
    </bean>

    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <value>*Service</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations">
            <list>
                <value>classpath:com/shfb/oframe/db/sqlmap/*.xml</value>
                <value>classpath:com/shfb/oframe/sysmg/repo/sqlmap/*.xml</value>
                <value>classpath:com/shfb/oframe/page/*.xml</value>
                <!--<value>classpath:page/*.xml</value>-->
                <!--初始化实体属性配置 -->
                <value>classpath:com/shfb/oframe/core/repo/sqlmap/*.xml</value>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"
                  value="com.shfb.oframe.sysmg.repo.mapper,com.shfb.oframe.core.repo.mapper,com.shfb.eland.repo.mapper"/>
    </bean>

    <!--OpCode 服务控制-->
    <bean id="transactionService" class="com.shfb.oframe.core.service.impl.TransactionServiceImpl">
        <property name="component" ref="queryStaffHaveRhtCmpt"/>
    </bean>

    <!--同步数据库时间 exeCycle为执行周期，可配置的值为 1d(1天)、1h(1小时)、1m(1分钟)、1s(1秒) 如果为负值则默认为0-->
    <bean id="syncDBDateTime" class="com.shfb.oframe.core.common.util.SyncDBDateTime">
        <constructor-arg name="exeCycle" value="365d"/>
        <constructor-arg name="template" ref="jdbcTemplate"/>
    </bean>
    <!--无效登陆清理 exeCycle为执行周期，可配置的值为 1d(1天)、1h(1小时)、1m(1分钟)、1s(1秒) 如果为负值则默认为0-->
    <bean id="loginCleanListener" class="com.shfb.oframe.core.web.listener.LoginCleanListener">
        <constructor-arg name="exeCycle" value="${loginCleanListener.exeCycle}"/>
        <constructor-arg name="isClean" value="${loginCleanListener.isClean}"/>
    </bean>

    <!--RMI 服务端配置，调用组件方式 查询服务    -->
    <bean class="com.shfb.oframe.core.common.Spring.RmiServiceExporterOfOframe">
        <!-- 不一定要与要输出的bean同名-->
        <property name="serviceName" value="RmiQueryService"/>
        <property name="service" ref="remoteServiceQueryImpl"/>
        <property name="serviceInterface" value="com.shfb.oframe.core.util.spring.ISvcUtil"/>
        <!--  默认为1099-->
        <property name="registryPort" value="rmi_registry_port"/>
    </bean>
    <!-- 远程查询服务 -->
    <bean id="remoteServiceQueryImpl" class="com.shfb.oframe.core.util.spring.impl.SvcUtilImpl">
        <property name="beanName" value="queryService"/>
        <property name="methodName" value="query"/>
    </bean>

    <!--RMI 服务端配置  服务接口暴露 staffService.queryStaff  -->
    <bean class="com.shfb.oframe.core.common.Spring.RmiServiceExporterOfOframe">
        <!-- 不一定要与要输出的bean同名-->
        <property name="serviceName" value="rmiService"/>
        <property name="service" ref="remoteQueryServiceImpl"/>
        <property name="serviceInterface" value="com.shfb.oframe.core.util.spring.ISvcUtil"/>
        <!--  默认为1099-->
        <property name="registryPort" value="rmi_registry_port"/>
    </bean>
    <!-- 远程查询服务 ，直接处理服务接口-->
    <bean id="remoteQueryServiceImpl" class="com.shfb.oframe.core.service.impl.RemoteQueryImpl">
        <!-- 处理该服务方式，默认本地 value可指定具体的Bean声明处理（且需要rmiP参数配置为true） -->
        <property name="rmiService" value=""/>
    </bean>

    <bean id="serverSocket" class="com.bjshfb.vf.server.nettyser.server.ServerSocket"
          init-method="test"/>
</beans>